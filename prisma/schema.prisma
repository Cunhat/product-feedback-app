// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(cuid())
    username String @unique
    name String
    image String?
    productRequest ProductRequest[]
    comment Comment[]
    accounts      Account[]
    sessions      Session[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id String @id @default(cuid())
    name String @unique
    productRequest ProductRequest[]
}
model Status {
    id String @id @default(cuid())
    name String @unique
    productRequest ProductRequest[]
}
model Comment {
    id String @id @default(cuid())
    content String
    
    user   User   @relation(fields: [userId], references: [id])
    userId String

    ProductRequest   ProductRequest   @relation(fields: [productRequestId], references: [id], onDelete: Cascade)
    productRequestId String 

    replies Comment[] @relation("comment_replies")
    parent   Comment?  @relation("comment_replies", fields: [parentId], references: [id])
    parentId String?
}

model ProductRequest {
    id String @id @default(cuid())
    title String
    description String
    upVotes Int
    comments Comment[]
    category Category @relation(fields: [categoryId], references: [id])
    categoryId String
    status Status @relation(fields: [statusId], references: [id])
    statusId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}
